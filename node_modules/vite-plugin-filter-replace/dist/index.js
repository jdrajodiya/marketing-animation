"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = __importDefault(require("fs/promises"));
function escape(str) {
    return str.replace(/[-[\]/{}()*+?.\\^$|]/g, '\\$&');
}
function parseReplacements(replacements) {
    if (!replacements || !replacements.length)
        return [];
    // TODO:
    // re-group replacements to ensure filter is unique
    return replacements.reduce((entries, replacement) => {
        const filter = replacement.filter instanceof RegExp
            ? replacement.filter
            : new RegExp(`(${[]
                .concat(replacement.filter)
                .filter((i) => i)
                .map((i) => escape(i.trim().replace(/\\+/g, '/')))
                .join('|')})`);
        let { replace = [] } = replacement;
        if (!filter)
            return entries;
        if (typeof replace === 'function' || !Array.isArray(replace)) {
            replace = [replace];
        }
        replace = replace.reduce((entries, rp) => {
            if (typeof rp === 'function')
                return entries.concat(rp);
            const { from, to } = rp;
            if (from === undefined || to === undefined)
                return entries;
            return entries.concat((source) => source.replace(from instanceof RegExp
                ? from
                : new RegExp(`(${[]
                    .concat(from)
                    .map(escape)
                    .join('|')})`, 'g'), String(to)));
        }, []);
        if (!replace.length)
            return entries;
        return entries.concat({ ...replacement, filter, replace });
    }, []);
}
function replace(replacements = [], options = {}) {
    const resolvedReplacements = parseReplacements(replacements);
    let isServe = true;
    if (!resolvedReplacements.length)
        return {};
    function replace(code, id) {
        return resolvedReplacements.reduce((code, rp) => {
            if (!rp.filter.test(id)) {
                return code;
            }
            return rp.replace.reduce((text, replace) => replace(text, id), code);
        }, code);
    }
    return {
        name: 'vite-plugin-filter-replace',
        enforce: options.enforce,
        apply: options.apply,
        config: (config, env) => {
            isServe = env.command === 'serve';
            if (!isServe)
                return;
            if (!config.optimizeDeps) {
                config.optimizeDeps = {};
            }
            if (!config.optimizeDeps.esbuildOptions) {
                config.optimizeDeps.esbuildOptions = {};
            }
            if (!config.optimizeDeps.esbuildOptions.plugins) {
                config.optimizeDeps.esbuildOptions.plugins = [];
            }
            config.optimizeDeps.esbuildOptions.plugins.unshift(...resolvedReplacements.map((option) => {
                return {
                    name: 'vite-plugin-filter-replace' + (option.id ? `:${option.id}` : ''),
                    setup(build) {
                        build.onLoad({ filter: option.filter, namespace: 'file' }, async ({ path }) => {
                            const source = await promises_1.default.readFile(path, 'utf8');
                            return {
                                loader: 'default',
                                contents: option.replace.reduce((text, replace) => replace(text, path), source),
                            };
                        });
                    },
                };
            }));
            return config;
        },
        renderChunk(code, chunk) {
            if (isServe)
                return null;
            return replace(code, chunk.fileName);
        },
        transform(code, id) {
            return replace(code, id);
        },
        async handleHotUpdate(ctx) {
            const defaultRead = ctx.read;
            ctx.read = async function () {
                return replace(await defaultRead(), ctx.file);
            };
        },
    };
}
exports.default = replace;
