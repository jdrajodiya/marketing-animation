var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});

// src/index.ts
import path from "path";
import fs from "fs";
import micromatch from "micromatch";
import fg from "fast-glob";
function isNodeModule(id) {
  if (id.startsWith(".") || path.isAbsolute(id)) {
    return id.includes("/node_modules/");
  }
  try {
    __require.resolve(id);
    return true;
  } catch (_) {
    return false;
  }
}
function plugin(config) {
  var _a;
  const preserveModulesRoot = (_a = config == null ? void 0 : config.root) != null ? _a : "src";
  let root;
  const isInternal = (file) => (config == null ? void 0 : config.internal) ? micromatch.isMatch(file, config.internal) : false;
  const isCopyTarget = (file) => (config == null ? void 0 : config.copy) ? micromatch.isMatch(file, config.copy) : false;
  return {
    name: "no-bundle",
    enforce: "pre",
    apply: "build",
    config(userConfig) {
      var _a2;
      const { entry, fileName = "[name]" } = ((_a2 = userConfig.build) == null ? void 0 : _a2.lib) || {};
      if (!entry)
        throw new Error('Required field "build.lib.entry" could not be found');
      return {
        build: {
          lib: { entry, fileName },
          rollupOptions: {
            output: {
              preserveModules: true,
              preserveModulesRoot
            }
          }
        }
      };
    },
    configResolved(resolvedConfig) {
      root = resolvedConfig.root;
    },
    async buildStart() {
      if (config == null ? void 0 : config.copy) {
        const cwd = preserveModulesRoot ? path.join(root, preserveModulesRoot) : root;
        const files = await fg(config.copy, { cwd });
        files.forEach((file) => {
          this.emitFile({
            type: "asset",
            source: fs.readFileSync(path.join(cwd, file)),
            fileName: file
          });
        });
      }
    },
    async resolveId(source, importer, options) {
      const [id] = source.split("?");
      if (options.isEntry)
        return null;
      if (!importer)
        return null;
      if (isInternal(id))
        return null;
      if (isNodeModule(id))
        return { id, external: true };
      const absolutePath = path.isAbsolute(id) ? path.join(root, id) : path.join(path.dirname(importer), id);
      const relativePath = path.relative(root, absolutePath);
      if (isCopyTarget(relativePath)) {
        return {
          id: path.isAbsolute(id) ? path.relative(path.dirname(importer), absolutePath) : id,
          external: true,
          moduleSideEffects: true
        };
      }
      return null;
    }
  };
}
export {
  plugin as default
};
