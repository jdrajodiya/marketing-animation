"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => plugin
});
module.exports = __toCommonJS(src_exports);
var import_path = __toESM(require("path"));
var import_fs = __toESM(require("fs"));
var import_micromatch = __toESM(require("micromatch"));
var import_fast_glob = __toESM(require("fast-glob"));
function isNodeModule(id) {
  if (id.startsWith(".") || import_path.default.isAbsolute(id)) {
    return id.includes("/node_modules/");
  }
  try {
    require.resolve(id);
    return true;
  } catch (_) {
    return false;
  }
}
function plugin(config) {
  var _a;
  const preserveModulesRoot = (_a = config == null ? void 0 : config.root) != null ? _a : "src";
  let root;
  const isInternal = (file) => (config == null ? void 0 : config.internal) ? import_micromatch.default.isMatch(file, config.internal) : false;
  const isCopyTarget = (file) => (config == null ? void 0 : config.copy) ? import_micromatch.default.isMatch(file, config.copy) : false;
  return {
    name: "no-bundle",
    enforce: "pre",
    apply: "build",
    config(userConfig) {
      var _a2;
      const { entry, fileName = "[name]" } = ((_a2 = userConfig.build) == null ? void 0 : _a2.lib) || {};
      if (!entry)
        throw new Error('Required field "build.lib.entry" could not be found');
      return {
        build: {
          lib: { entry, fileName },
          rollupOptions: {
            output: {
              preserveModules: true,
              preserveModulesRoot
            }
          }
        }
      };
    },
    configResolved(resolvedConfig) {
      root = resolvedConfig.root;
    },
    async buildStart() {
      if (config == null ? void 0 : config.copy) {
        const cwd = preserveModulesRoot ? import_path.default.join(root, preserveModulesRoot) : root;
        const files = await (0, import_fast_glob.default)(config.copy, { cwd });
        files.forEach((file) => {
          this.emitFile({
            type: "asset",
            source: import_fs.default.readFileSync(import_path.default.join(cwd, file)),
            fileName: file
          });
        });
      }
    },
    async resolveId(source, importer, options) {
      const [id] = source.split("?");
      if (options.isEntry)
        return null;
      if (!importer)
        return null;
      if (isInternal(id))
        return null;
      if (isNodeModule(id))
        return { id, external: true };
      const absolutePath = import_path.default.isAbsolute(id) ? import_path.default.join(root, id) : import_path.default.join(import_path.default.dirname(importer), id);
      const relativePath = import_path.default.relative(root, absolutePath);
      if (isCopyTarget(relativePath)) {
        return {
          id: import_path.default.isAbsolute(id) ? import_path.default.relative(import_path.default.dirname(importer), absolutePath) : id,
          external: true,
          moduleSideEffects: true
        };
      }
      return null;
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
